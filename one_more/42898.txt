- https://school.programmers.co.kr/learn/courses/30/lessons/42898
- 키워드 : dp
- 레벨 : 3

전형적인 dp 문제, 패딩하면 쉬움 처음 풀이는 난잡했지만 경우의 수 따지기에는 좋아서 넣어둠

(puddles y, x 좌표에 유의하자)
처음풀이 : 

def solution(m, n, puddles):
    dp = [[0 for i in range(0, m+1)] for _ in range(0, n+1)]

    for y in range(0, n+1):
        for x in range(0, m+1):
            if y == 0 or x == 0 or [x, y] in puddles:
                dp[y][x] = float('inf')
            elif y == 1 and x == 1:
                dp[y][x] = 1
            elif dp[y-1][x] == float('inf') and dp[y][x-1] != float('inf'):
                dp[y][x] = dp[y][x-1]
            elif dp[y-1][x] != float('inf') and dp[y][x-1] == float('inf'):
                dp[y][x] = dp[y-1][x]
            elif dp[y-1][x] == float('inf') and dp[y][x-1] == float('inf'):
                dp[y][x] = float('inf')
            else:
                dp[y][x] = dp[y][x-1] + dp[y-1][x]
    if dp[n][m] == float('inf'):
        return 0
    return dp[n][m] % 1000000007
최적화:

def solution(m, n, puddles):
    dp = [[0 for i in range(0, m+1)] for _ in range(0, n+1)]
    dp[1][1] = 1
    for y in range(1, n+1):
        for x in range(1, m+1):
            if [y, x] == [1, 1] or [x, y] in puddles:
                continue
            else:
                dp[y][x] = dp[y][x-1] + dp[y-1][x]
    return dp[n][m] % 1000000007