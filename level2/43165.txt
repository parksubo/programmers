count = 0
def dfs(numbers, target, cnt):
    global count
    if cnt == len(numbers):
        if sum(numbers) == target:
            count += 1
            return
    else: 
        dfs(numbers, target, cnt+1)
        numbers[cnt] *= -1
        dfs(numbers, target, cnt+1)
        return
    

def solution(numbers, target):
    global count
    dfs(numbers, target, 0)
    return count


### another sol

from itertools import product
def solution(numbers, target):
    # numbers가 [a1, b1, c1] 이면 [(a1, -a1), (b1, -b1), (c1, -c1)] 형태로 변환
    l = [(x, -x) for x in numbers]
    # product(*l)을 하면 각 요소들의 모든 경우에 수 생성 ex) (a1, b1, c1), (-a1, b1, c1), (a1, -b1, c1) ... 등 총 8개 생성
    s = list(map(sum, product(*l)))
    return s.count(target)